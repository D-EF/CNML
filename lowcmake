#####
# @Author: Darth_Eternalfaith darth_ef@hotmail.com
# @Date: 2023-04-20 00:58:11
# @LastEditors: Darth_Eternalfaith darth_ef@hotmail.com
# @LastEditTime: 2023-04-24 04:22:40
# @FilePath: \cnml\CMakeLists.txt
# @Description: CMake配置
# @
# @Copyright (c) 2023 by ${git_name} ${git_email}, All Rights Reserved. 
#####

cmake_minimum_required(VERSION 3.25)

project (NML)

# 指定 C++ 标准为至少 C++20
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# open 设置使用 module 特性 open
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20 -fmodules-ts -fsanitize=address -fcoroutines -fconcepts-ts -fpermissive -Wreturn-type -freport-bug -Wunused-result")
        set(CXX_FLAGS       "${CMAKE_CXX_FLAGS} -std=c++20 -fmodules-ts -fsanitize=address -fcoroutines -fconcepts-ts -fpermissive -Wreturn-typ -freport-buge -Wunused-result")
# end  设置使用 module 特性 end 

# 文件utf-8
    add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
    add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")

# open * 初始化输出目录 * open
    # 清空输出目录，防止旧文件影响新的生成结果
        add_custom_target(clean-out COMMAND ${CMAKE_COMMAND} -E remove_directory "${CMAKE_CURRENT_SOURCE_DIR}/out")
    # 创建输出目录和子目录
        add_custom_target(create-out-dir ALL COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_SOURCE_DIR}/out")
        add_custom_target(create-lib-dir ALL COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_SOURCE_DIR}/out/lib")
        add_custom_target(create-dll-dir ALL COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_SOURCE_DIR}/out/dll")
        add_custom_target(create-test-dir ALL COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_SOURCE_DIR}/out/test")
    # 执行初始化输出目录
        add_dependencies(create-out-dir clean-out)
        add_dependencies(create-lib-dir create-out-dir)
        add_dependencies(create-dll-dir create-out-dir)
        add_dependencies(create-test-dir create-out-dir)
    # 指定输出路径
        SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY  ${PROJECT_SOURCE_DIR}/out/lib/)
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${PROJECT_SOURCE_DIR}/out/dll/)
        SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY  ${PROJECT_SOURCE_DIR}/out/test/)
# end  * 初始化输出目录 * end 

# 设置项目代码根目录为 /src/
include_directories("${PROJECT_SOURCE_DIR}/src")

# open * 设置编译文件 * open
    # 源文件
    file(GLOB_RECURSE SOURCE_FILES
        "${PROJECT_SOURCE_DIR}/src/**.c"
        "${PROJECT_SOURCE_DIR}/src/**.cpp"
    )
    # 头文件
    file(GLOB_RECURSE HEADER_FILES
        "${PROJECT_SOURCE_DIR}/src/**.h"
        "${PROJECT_SOURCE_DIR}/src/**.hpp"
    )
    # 模块文件
    file(GLOB_RECURSE MODULE_FILES
        "${PROJECT_SOURCE_DIR}/src/**.cxx"
        "${PROJECT_SOURCE_DIR}/src/**.hxx"
    )
    # 将 "test.cpp" 的文件 放置在末尾
        # list(FILTER SOURCE_FILES EXCLUDE REGEX ".*test\\.cpp$")
        # file(GLOB_RECURSE TEST_FILES"${PROJECT_SOURCE_DIR}/src/**test.cpp")
        # list(APPEND SOURCE_FILES ${TEST_FILES})
        # message(STATUS "\n\nSRC_FILES: \n ${SOURCE_FILES}")
# end  * 设置编译文件 * end 


# 在大于 c++20 标准时, 增加宏 "__USE_CPP20_FEATURES__"
if (CMAKE_CXX_STANDARD GREATER_EQUAL 20)
    add_compile_definitions(__USE_CPP20_FEATURES__)
endif()


# open * 分库编译 * open
    list(REMOVE_ITEM SOURCE_FILES "${PROJECT_SOURCE_DIR}/src/test.cpp")

    set(OUTPUT_TEST_NAME "${CMAKE_PROJECT_NAME}_TEST")
    set(OUTPUT_LIB_NAME "${CMAKE_PROJECT_NAME}_LIB")
    set(OUTPUT_DLL_NAME "${CMAKE_PROJECT_NAME}_DLL")

    # 编译静态库
        add_library(OUTPUT_LIB_NAME STATIC ${SOURCE_FILES} ${HEADER_FILES})
        set_target_properties(OUTPUT_LIB_NAME PROPERTIES PREFIX "" OUTPUT_NAME "${CMAKE_PROJECT_NAME}")
        # target_sources( ${OUTPUT_DLL_NAME} PUBLIC ${MODULE_FILES} )

    # 编译动态库
        add_library(OUTPUT_DLL_NAME STATIC ${SOURCE_FILES} ${HEADER_FILES})
        set_target_properties(OUTPUT_DLL_NAME PROPERTIES PREFIX "" OUTPUT_NAME "${CMAKE_PROJECT_NAME}")
        # target_sources( ${OUTPUT_DLL_NAME} PUBLIC ${MODULE_FILES} )

    # 编译测试例
        add_executable(${OUTPUT_TEST_NAME} ${PROJECT_SOURCE_DIR}/src/test.cpp)
        target_link_libraries(${OUTPUT_TEST_NAME} OUTPUT_DLL_NAME)
        
    #追加模板
    target_sources( ${OUTPUT_TEST_NAME} PUBLIC ${MODULE_FILES} )
# end  * 分库编译 * end 

# open * 直接编译 * open
    # add_executable(${CMAKE_PROJECT_NAME}_TEST ${SOURCE_FILES})
# end  * 直接编译 * end 
